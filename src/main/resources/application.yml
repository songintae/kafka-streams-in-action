spring:
  kafka:
    # Kafka Streams Binder에서는 두가지 Level에서 Kafka Broker를 등록할 수 있다. 카프카 브로커는 카프카를 사용하는 다양한 곳에서 사용되기 때문에 Boot Property Level에 설정하고 사용한다.
    # https://docs.spring.io/spring-cloud-stream-binder-kafka/docs/3.2.1/reference/html/spring-cloud-stream-binder-kafka.html#_setting_up_bootstrap_server_configuration
    bootstrap-servers: localhost:9092
    producer:
      acks: 1
      batch-size: 1000000
      key-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        linger.ms: 100

  # Kafka Streams Binder에서는 Functional Style, mperative programming model 두가지 방식의 스트림 프로세서 Binder 기능을 제공한다.
  # https://docs.spring.io/spring-cloud-stream-binder-kafka/docs/3.2.1/reference/html/spring-cloud-stream-binder-kafka.html#_programming_model
  cloud:
    stream:
      function:
        definition: kafkaStreamsYellingApp;zMartStreamApplication;zMartStreamsJoinsApplication
      bindings:
        # KafkaStreams Bindings inbound consumer에 useNativeDecoding을 사용할 때 주의해야한다.
        # useNativeDecoding 설정 또는 KStreamBoundElementFactory.createInput의 분기 전을 통해 useNativeDecoding이 결정되는데, default값은 true이다.
        # useNativeDecoding이 true일 경우 사용자가 선언한 valueSerde를 사용한다.
        # useNativeDecoding가 false 일 경우 Spring Cloud Stream에서 자동으로 Message를 Conversion을 해준다. (사용자가 입력한 valueSerde와 무관하게 Serde가 설정됨 -> 일반적인 JsonSerde는 지원)
        # 따라서 Topic ConsumerRecorde Deserialize 규칙에 따라 적절한 설정을 통해 설정을 해야한다.
        kafkaStreamsYellingApp-in-0:
          destination: src-topic
          consumer:
            concurrency: 1
        zMartStreamApplication-in-0:
          destination: transaction
          consumer:
            concurrency: 1
        zMartStreamsJoinsApplication-in-0:
          destination: coffee
        zMartStreamsJoinsApplication-in-1:
          destination: electronics
      kafka:
        streams:
          binder:
            functions:
              kafkaStreamsYellingApp:
                applicationId: kafkaStreamsYellingApp
              zMartStreamApplication:
                applicationId: zMartStreamApplication
              zMartStreamsJoinsApplication:
                applicationId: zMartStreamsJoinsApplication
                configuration:
                  num.stream.threads: 1
            configuration:
              replication.factor: 1
              default:
                key.serde: org.springframework.kafka.support.serializer.JsonSerde
                # default.value.serde는 useNativeDecoding = true && Bindings에 valueSerde에 설정이 되어있지 않을 경우에만 동작한다
                value.serde: org.springframework.kafka.support.serializer.JsonSerde
            # Kafka Streams Binder는 input binder에서 에러가 발생할 떄 어떻게 처리할지에 대한 exception handler를 설정할 수 있다.
            # 해당 설정은 Application에 존재하는 모든 Stream Processor 에 적용되기 때문에 개별적으로 설정이 필요한 경우 따로 설정을 주어야한다.
            # https://docs.spring.io/spring-cloud-stream-binder-kafka/docs/3.2.1/reference/html/spring-cloud-stream-binder-kafka.html#_error_handling
            deserialization-exception-handler: logandfail
          default:
            consumer:
              startOffset: latest
          bindings:
            kafkaStreamsYellingApp-in-0:
              consumer:
                keySerde: org.apache.kafka.common.serialization.Serdes$StringSerde
                valueSerde: org.apache.kafka.common.serialization.Serdes$StringSerde
            zMartStreamApplication-in-0:
              consumer:
                keySerde: org.apache.kafka.common.serialization.Serdes$StringSerde
                valueSerde: com.example.kafkastreamsinaction.serde.PurchaseSerde
            zMartStreamsJoinsApplication-in-0:
              consumer:
                keySerde: org.apache.kafka.common.serialization.Serdes$StringSerde
                valueSerde: com.example.kafkastreamsinaction.serde.PurchaseSerde
                timestampExtractorBeanName: transactionTimestampExtractor
            zMartStreamsJoinsApplication-in-1:
              consumer:
                keySerde: org.apache.kafka.common.serialization.Serdes$StringSerde
                valueSerde: com.example.kafkastreamsinaction.serde.PurchaseSerde
                timestampExtractorBeanName: transactionTimestampExtractor

